<?php

namespace mysiar\Bundle\InvoiceBundle\Repository;

use Doctrine\ORM\EntityRepository;
use FOS\UserBundle\FOSUserBundle;
use mysiar\Bundle\InvoiceBundle\Entity\InvoiceUser;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Validator\Constraints\DateTime;


/**
 * InvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends EntityRepository
{

    /**
     * Gets invoice by its id from repository
     *
     * @param $id
     * @return object
     */
    public function getInvoiceById($id)
    {
        return $this->_em->find($this->_entityName, $id);
    }

   /**
     * Checks if invoice is own by logged user
     *
     * @param Invoice $invoice
     * @param InvoiceUser $user
     * @return bool
     */
    public function invoiceOwner($invoice, $user)
    {
        return $user == $invoice->getInvoiceUser() ? true : false;
    }

    public function getAllInvoiceForUser($user)
    {
        return $this->_em->getRepository($this->_entityName)
                    ->findBy(
                        array( 'invoiceUser' => $user),
                        array( 'dateOfIssue' => 'ASC')
                    );
    }

    /**
     * Generates next number for invoice.
     * sequential number for a year
     *
     * @return int
     */
    public function generateInvoiceNumber($user)
    {
        $firstDay = new \DateTime();
        $firstDay->setDate($firstDay->format('Y'), 1, 1);
        $lastDay = new \DateTime();
        $lastDay->setDate($lastDay->format('Y'), 12, 31);

        $query = $this->createQueryBuilder('invoice')
            ->select('MAX(invoice.invoiceNumber) AS last_invoice_number')
            ->where('invoice.dateOfIssue >= :fromDate')
            ->andWhere('invoice.dateOfIssue <= :toDate')
            ->andWhere('invoice.invoiceUser = :invoiceUser')
            ->setParameter('fromDate', $firstDay)
            ->setParameter('toDate', $lastDay)
            ->setParameter('invoiceUser', $user)
            ->getQuery();

        $last_invoice_number = $query->getResult()[0]['last_invoice_number'];

        return $last_invoice_number ? $last_invoice_number+1 : 1;
    }

}
